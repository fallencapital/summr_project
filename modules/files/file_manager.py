#!/usr/bin/env python3
import os
import subprocess
from pathlib import Path

class FileManager:
    def __init__(self):
        self.supported_extensions = {'.pdf', '.jpg', '.png', '.txt', '.jpeg'}
    
    def find_files_everywhere(self, search_text):
        found_files = set()
        search_locations = [Path.home()]
        
        print("–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...")
        
        for location in search_locations:
            if location.exists():
                print(f"–ò—â—É –≤: {location}")
                
                for root, dirs, files in os.walk(location):
                    try:
                        for file in files:
                            if search_text.lower() in file.lower():
                                full_path = Path(root) / file
                                found_files.add(str(full_path.resolve()))
                    except PermissionError:
                        continue
                    except KeyboardInterrupt:
                        print("–ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                        return list(found_files)
        
        return list(found_files)
    
    def is_supported_file(self, file_path):
        _, ext = os.path.splitext(file_path)
        return ext.lower() in self.supported_extensions
    
    def file_exists(self, file_path):
        return os.path.isfile(file_path)
    
    def open_file(self, file_path):
        try:
            subprocess.run(['xdg-open', file_path], check=True)
            print(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç: {file_path}")
            return True
        except subprocess.CalledProcessError:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {file_path}")
            return False
        except FileNotFoundError:
            print("–ö–æ–º–∞–Ω–¥–∞ 'xdg-open' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Ubuntu/Linux")
            return False
    
    def display_files_menu(self, files):
        if not files:
            print("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        print("=" * 60)
        
        for i, file_path in enumerate(files, 1):
            file_name = os.path.basename(file_path)
            print(f"{i:2d}. {file_name}")
            print(f"    üìç {file_path}")
            print()
        
        print("=" * 60)
        return files
    
    def get_file_selection(self, files):
        while True:
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞, '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip().lower()
                
                if choice in ['–Ω–∞–∑–∞–¥', 'back', 'b']:
                    return 'back'
                elif choice in ['–≤—ã—Ö–æ–¥', 'exit', 'quit', 'q']:
                    return 'exit'
                elif not choice:
                    continue
                
                if choice.isdigit():
                    index = int(choice) - 1
                    if 0 <= index < len(files):
                        selected_file = files[index]
                        
                        if not self.is_supported_file(selected_file):
                            print("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")
                            print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: {', '.join(self.supported_extensions)}")
                            continue
                        
                        if not self.file_exists(selected_file):
                            print(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {selected_file}")
                            continue
                        
                        return selected_file
                    else:
                        print(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(files)}")
                else:
                    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É")
                    
            except KeyboardInterrupt:
                print("\n–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
                return 'exit'
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
    
    def run_search_mode(self):
        print("=== –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ ===")
        print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è: PDF, JPG, PNG, TXT")
        print("=" * 50)
        
        while True:
            try:
                search_text = input("\n–ß—Ç–æ –∏—â–µ–º? (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()
                
                if search_text.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit', 'q']:
                    print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    return False
                    
                if not search_text:
                    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞")
                    continue
                
                files = self.find_files_everywhere(search_text)
                
                if not files:
                    print("\n–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    continue
                
                self.display_files_menu(files)
                
                result = self.get_file_selection(files)
                
                if result == 'exit':
                    print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    return False
                elif result == 'back':
                    continue
                elif isinstance(result, str):
                    success = self.open_file(result)
                    if success:
                        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞...")
                    
            except KeyboardInterrupt:
                print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                return False
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    def run_direct_mode(self):
        print("=== –†–µ–∂–∏–º –ø—Ä—è–º–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è ===")
        print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, JPG, PNG, TXT")
        print("=" * 40)
        
        while True:
            file_path = input("\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–∏–ª–∏ '–ø–æ–∏—Å–∫' –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞, '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()
            
            if file_path.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit', 'q']:
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                return False
            elif file_path.lower() in ['–ø–æ–∏—Å–∫', 'search', 's']:
                return True
            
            if not file_path:
                print("–ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                continue
            
            abs_path = os.path.abspath(file_path)
            
            if not self.file_exists(abs_path):
                print(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {abs_path}")
                continue
            
            if not self.is_supported_file(abs_path):
                print("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")
                print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: {', '.join(self.supported_extensions)}")
                continue
            
            self.open_file(abs_path)
    
    def run_standalone(self):
        print("=== –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä ===")
        print("1. –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤")
        print("2. –†–µ–∂–∏–º –ø—Ä—è–º–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ –ø—É—Ç–∏")
        print("=" * 30)
        
        current_mode = 'search'
        
        while True:
            if current_mode == 'search':
                result = self.run_search_mode()
                if result is False:
                    break
                else:
                    current_mode = 'direct'
            else:
                result = self.run_direct_mode()
                if result is False:
                    break
                else:
                    current_mode = 'search'

def search_and_open_files(search_text=None):
    fm = FileManager()
    
    if search_text is None:
        search_text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
    
    files = fm.find_files_everywhere(search_text)
    
    if not files:
        print("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    fm.display_files_menu(files)
    result = fm.get_file_selection(files)
    
    if isinstance(result, str) and result not in ['back', 'exit']:
        fm.open_file(result)
    
    return result

def open_file_directly(file_path):
    fm = FileManager()
    
    abs_path = os.path.abspath(file_path)
    
    if not fm.file_exists(abs_path):
        print(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {abs_path}")
        return False
    
    if not fm.is_supported_file(abs_path):
        print("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")
        return False
    
    return fm.open_file(abs_path)
